#include <stdlib.h>
#include <stdio.h>
#include <math.h>

#define N 512

float Mat[N][N], MatDD[N][N];

float V1[N], V2[N], V3[N], V4[N];

void InitData(){
        int i,j;
        srand(8824553);
        for( i = 0; i < N; i++ )
         for( j = 0; j < N; j++ ){
                Mat[i][j]=(((i*j)%3)?-1:1)*(100.0*(rand()/(1.0*RAND_MAX)));
                if ( (abs(i - j) <= 3) && (i != j))
                        MatDD[i][j] = (((i*j)%3) ? -1 : 1)*(rand()/(1.0*RAND_MAX));
                else if ( i == j )
                        MatDD[i][j]=(((i*j)%3)?-1:1)*(10000.0*(rand()/(1.0*RAND_MAX)));
                else MatDD[i][j] = 0.0;
        }
        for( i = 0; i < N; i++ ){
                V1[i]=(i<N/2)?(((i*j)%3)?-1:1)*(100.0*(rand()/(1.0*RAND_MAX))):0.0;
                V2[i]=(i>=N/2)?(((i*j)%3)?-1:1)*(100.0*(rand()/(1.0*RAND_MAX))):0.0;
                V3[i]=(((i*j)%5)?-1:1)*(100.0*(rand()/(1.0*RAND_MAX)));
        }
}

void PrintVect( float vect[N],int from, int numel ){
	for (int i = from; i<from+numel; i++){
		printf("%f", vect[i]);
	}
	printf("\n");

}

void PrintRow(float mat[N][N], int row, int from, int numel) {
    for (int i = from; i < from + numel && i < N; i++) {
        printf("%f ", mat[row][i]);
    }
    printf("\n");
}

void MultEscalar( float vect[N], float vectres[N], float alfa ) {
	 for (int i = 0; i < N; i++) {
        vectres[i] = alfa * vect[i];
    }
}

float Scalar( float vect1[N], float vect2[N] ){
	for (int i = 0; i < N; i++) {
		float vect3 = vect1[i] * vect2[i];
		}
}

float Magnitude(float vect[N]) {
    float sumaCuadrados = 0;

    for (int i = 0; i < N; i++) {
        sumaCuadrados += vect[i] * vect[i];
    }

    return sqrt(sumaCuadrados);
}

int Ortogonal(float vect1[N], float vect2[N]) {
    float esc = 0;
    for (int i = 0; i < N; i++) {
        esc += vect1[i] * vect2[i];
    }
    if (esc == 0) {
        return 1; // ortogonales
    } else {
        return 0; // No ortogonales
    }
}

void Projection( float vect1[N], float vect2[N], float vectres[N] ){
	float numerador = 0;
	float denominador = 0;
	float resultat = 0;
        numerador = Scalar( vect1, vect2); 
	denominador =  Magnitude(vect1);
	MultEscalar(vect2, vectres, (numerador / denominador));

}

float Infininorm(float M[N][N]) {
    float max_sum = 0;

    for (int i = 0; i < N; i++) {
        float suma_fila= 0;

        for (int j = 0; j < N; j++) {
            suma_fila += fabs(M[i][j]); // Suma abs de la fila i
        }

        if (suma_fila > max_sum) {
            max_sum = suma_fila; // Actualiza el máximo si hay suma mayor
        }
    }
    return max_sum; 
}

float Onenorm(float M[N][N]) {
    float max_sum = 0;

    for (int j = 0; j < N; j++) {
        float col_sum = 0;

        for (int i = 0; i < N; i++) {
            col_sum += fabs(M[i][j]); // Suma abs de la columna j
        }

        if (col_sum > max_sum) {
            max_sum = col_sum; // Actualiza el máximo si hay suma mayor
        }
    }
    return max_sum;
}

float NormFrobenius(float M[N][N]) {
    float suma_cuadrados = 0;

    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            suma_cuadrados += M[i][j] * M[i][j]; // suma dels quadrar de coeficients
        }
    }
    return sqrt(suma_cuadrados); // arrel quadrada de suma de cuadrados
}

int DiagonalDom(float M[N][N]) {
    for (int i = 0; i < N; i++) {
        float val_diagonal = fabs(M[i][i]);
        float suma_fila = 0;

        for (int j = 0; j < N; j++) {
            if (j != i) {
                suma_fila += fabs(M[i][j]);
            }
        }

        if (val_diagonal < suma_fila) {
            return 0; // matriu no diagonal
        }
    }    return 1; // matriu diagonal
}

int Jacobi( float M[N][N] , float vect[N], float vectres[N], unsigned int iter ){
	if (!DiagonalDom(M)) {
	printf("Matriu no diagonal dominant. No es pot aplicar Jacobi");
	return 0;
	}
	float temp[N];
	unsigned int k;
	for (k=0; k< iter;k++){
		for (int i = 0; i < N; i++) {
			temp[i]=vect[i];
			for (int j=0; j < N; j++) {
				if (j!=i){
					temp[i]=M[i][j]*vectres[j];
				}
			}
			temp[i] /= M[i][i];
		}
		for (int i=0; i<N; i++){
			vectres[i]=temp[i];
		}
	}
	return 1;
}

int main(){
    InitData();

    PrintVect(V1, 0, 9);
    PrintVect(V1, 256, 265);
    PrintVect(V2, 0, 9);
    PrintVect(V2, 256, 265);
    PrintVect(V3, 0, 9);
    PrintVect(V3, 256, 265);
    PrintRow(Mat, 0, 9, 100);

    float result = Scalar(V1, V2);
    printf("Resultado de Scalar: %f\n", result);
    float result1 = Scalar(V1, V3);
    printf("Resultado de Scalar: %f\n", result1);
    float result2 = Scalar(V2, V3);
    printf("Resultado de Scalar: %f\n", result2);

    result = Magnitude(V1);
    printf("Magnitud de V1: %f\n", result);
    result = Magnitude(V2);
  int resultado= Jacobi(M, vect, vectres, iter);

    if (resultado) {
        printf("El resultado es:\n");
        for (int i = 0; i < N; i++) {
            printf("%.2f ", vectres[i]);
        }
        printf("\n");
    } else {
        printf("Mètode Jacobi NO aplicat\n");
    }
}
